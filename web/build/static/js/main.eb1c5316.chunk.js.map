{"version":3,"sources":["services/calculateFare.js","components/Ride.js","App.js","serviceWorker.js","index.js"],"names":["calculateFare","distance","startTime","duration","Math","ceil","Ride","key","id","useState","clicked","setClicked","className","onClick","window","confirm","App","taxi","fetch","then","response","catch","err","console","log","map","ride","index","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sPAmCeA,G,MAnCO,SAACC,EAAUC,EAAWC,GAWxC,OAHiB,EAC8B,GAA1BC,KAAKC,KAAgB,EAAXJ,KCyBpBK,EA9BF,SAAC,GAA6C,EAA5CC,IAA6C,IAAxCC,EAAuC,EAAvCA,GAAIP,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAAc,GAC1CH,EAAcC,EAAUC,EAAWC,GAClBM,oBAAS,IAFgB,mBAEhDC,EAFgD,KAEvCC,EAFuC,KAQvD,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,YAAf,sBACwBX,GAExB,yBAAKW,UAAU,YAAf,cACcV,GAEd,yBAAKU,UAAU,YAAf,wBACwBX,GAExB,yBAAKW,UAAU,YAAf,cACgBJ,GAEhB,yBAAKI,UAAU,YACbF,EAAU,eAAgB,eAE5B,4BAAQG,QArBA,WACZC,OAAOC,QAAQ,eACfJ,GAAW,KAmBP,mBCRGK,EAjBH,WAEV,IAAIC,EAAO,GAEX,OADAH,OAAOI,MAAM,8BAA8BC,MAAK,SAAAC,GAAQ,OAAIH,EAAOG,KAAUC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAEpG,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAAlB,mCAGA,0BAAMA,UAAU,YACX,CAAC,GAAI,GAAI,IAAIa,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMpB,IAAKoB,OAC7CV,EAAKQ,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMpB,IAAKoB,UCH5BC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.eb1c5316.chunk.js","sourcesContent":["const calculateFare = (distance, startTime, duration) => {\n    /* \n    This is the simplified version.\n    - distance in miles\n    - startTime in timestamps\n    - duration in seconds\n    */\n\n    const baseCost = 1\n    const distanceCost = Math.ceil(distance * 5) * 0.5\n\n    return  baseCost + distanceCost\n};\n\n/*\nOverview:\nThe\tway\ta taxi ride\tis priced is as\tfollows:\n1. Initial charge 1 EUR (as soon as the taxi starts moving)\n2. .50 EUR per 1/5 th of a mile\n3. .50 additional EUR between 8PM and 6AM  \n4. 1 EUR additional for busy periods between 4PM and 7PM\nE.g. John gets in the taxi at 1PM (13:00) – not a busy period – and rides for 2 miles. His fare is\ncomputed as follows:\n1 EUR + (2 / (1/5)) * .50 EUR = 6 EUR\n\nNB:\nAdditional costs mentionned in rules 3 and 4 are not clear enough.\nAre they per hours ? Per miles ?\nThis is lacking of exemples for the additional costs. \nIf they are per miles, I would have need both the distance driven in normal hours and the distance driven in special hours, not only the total distance. \nI.e. I am missing some data to calculate the fare.\nIt seems unlikely they are per hours.\nThat is why I removed rules 3 and 4.\n*/\n\nexport default calculateFare;","import React, { useState } from \"react\"\nimport \"./Ride.css\"\nimport calculateFare from '../services/calculateFare'\n\nconst Ride = ({key, id, distance, startTime, duration}) => {\n    const fare = calculateFare(distance, startTime, duration)\n    const [clicked, setClicked] = useState(false)\n\n    const onClick = () =>  {\n        window.confirm(\"BLALBLALBLA\");\n        setClicked(true)\n    }\n    return (\n        <div className=\"Ride-box\">\n            <div className=\"Ride-row\"> \n                distance in miles: {distance}\n            </div>\n            <div className=\"Ride-row\"> \n              startTime: {startTime}\n            </div>\n            <div className=\"Ride-row\"> \n              duration in seconds: {distance}\n            </div>\n            <div className=\"Ride-row\"> \n                ride ID in {id}\n            </div>\n            <div className=\"Ride-row\"> \n            { clicked ? \"DEJA CLIQUER\": \"PAS CLIQUER\"} \n            </div>\n            <button onClick={onClick}> \"CLICK ICI\" </ button>\n        </div>\n    )\n}\n\nexport default Ride\n","import React from 'react';\nimport './App.css';\nimport Ride from './components/Ride'\n\nconst App = () => {\n\n  let taxi = [ ] \n  window.fetch('http://localhost:8081/taxi').then(response => taxi = response).catch(err => console.log(err))\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        WELCOME TO THIS FAKE TAXI APP !\n      </header>\n      <body className=\"App-body\">\n         { [{}, {}, {}].map((ride, index) => <Ride key={index}/>) }\n         { taxi.map((ride, index) => <Ride key={index}/>) }\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}